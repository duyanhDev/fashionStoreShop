import React, { useState } from "react";
import { PostChatBotAI } from "../service/ChatBot";
import { useOutletContext } from "react-router-dom";

const BotChatAI = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o. m·ªôt s·ªë g·ª£i √Ω ƒë·ªÉ bi·∫øt th√¥ng tin v·ªÅ trang web ho·∫∑c s·∫£n ph·∫©m : ng∆∞·ªùi vi·∫øt ra trang web n√†y l√† ai ? : g·ª£i √Ω s·∫£n ph·∫©m",
      sender: "bot",
    },
  ]);
  const { user, ListProducts } = useOutletContext();

  const [inputMessage, setInputMessage] = useState("");

  // Icons for user and bot
  const UserIcon = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="w-8 h-8 text-gray-600"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
      />
    </svg>
  );

  const BotIcon = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="w-8 h-8 text-blue-600"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v9a2 2 0 002 2z"
      />
    </svg>
  );

  const SendIcon = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="w-6 h-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M13 5l7 7-7 7M5 5l7 7-7 7"
      />
    </svg>
  );

  // Handle sending messages
  const handleSendMessage = async () => {
    if (inputMessage.trim() === "") return;

    const newUserMessage = {
      id: Date.now(),
      text: inputMessage,
      sender: "user",
    };
    setMessages((prev) => [...prev, newUserMessage]);
    setInputMessage("");

    const lowerCaseMessage = inputMessage.trim().toLowerCase();

    // H√†m ki·ªÉm tra t·ª´ kh√≥a
    const checkKeywords = (keywords) =>
      keywords.some((keyword) => lowerCaseMessage.includes(keyword));

    // Nh√≥m t·ª´ kh√≥a
    const keywordGroups = {
      products: ["s·∫£n ph·∫©m", "list", "danh s√°ch", "h√†ng h√≥a"],
      highPriceProducts: ["gi√° cao", "cao c·∫•p", "ƒë·∫Øt ti·ªÅn", "premium"],
      author: ["ng∆∞·ªùi vi·∫øt", "t√°c gi·∫£", "s√°ng l·∫≠p", "creator"],
    };

    // X·ª≠ l√Ω s·∫£n ph·∫©m
    if (checkKeywords(keywordGroups.products)) {
      const productSuggestions = ListProducts.map(
        (product, index) => `
          <li>
            <strong>${index + 1}. ${product.name}</strong>
            <p>Gi√°: ${product.price.toLocaleString()}ƒë</p>
          </li>`
      ).join("");

      const botResponse = {
        id: Date.now() + 1,
        text: `
          <strong>üõí Danh s√°ch s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i:</strong>
          <ul>${productSuggestions}</ul>
        `,
        sender: "bot",
      };

      setMessages((prev) => [...prev, botResponse]);
      return;
    }

    // X·ª≠ l√Ω s·∫£n ph·∫©m cao c·∫•p
    if (checkKeywords(keywordGroups.highPriceProducts)) {
      const productPricesMax = ListProducts.filter(
        (product) => product.price > 2000000
      )
        .map(
          (product, index) => `
        <li>
          <strong>${index + 1}. ${product.name}</strong>
          <p>Gi√°: ${product.price.toLocaleString()}ƒë</p>
        </li>`
        )
        .join("");

      const productRes = {
        id: Date.now() + 2,
        text:
          productPricesMax.length > 0
            ? `
            <strong>üíé S·∫£n ph·∫©m cao c·∫•p c·ªßa ch√∫ng t√¥i:</strong>
            <ul>${productPricesMax}</ul>
          `
            : "üîç Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m cao c·∫•p n√†o.",
        sender: "bot",
      };

      setMessages((prev) => [...prev, productRes]);
      return;
    }

    // X·ª≠ l√Ω th√¥ng tin t√°c gi·∫£
    if (checkKeywords(keywordGroups.author)) {
      const authorProfile = {
        name: "ƒê·∫∑ng Trinh Duy Anh",
        education: "ƒê·∫°i h·ªçc Th·ªß D·∫ßu M·ªôt",
        skills: [
          "Ph√°t tri·ªÉn ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i",
          "Th√†nh th·∫°o React v√† Node.js",
          "Qu·∫£n l√Ω c∆° s·ªü d·ªØ li·ªáu v·ªõi MongoDB",
          "X√¢y d·ª±ng h·ªá th·ªëng API m·∫°nh m·∫Ω",
        ],
        bio: "M·ªôt l·∫≠p tr√¨nh vi√™n ƒë·∫ßy nhi·ªát huy·∫øt v·ªõi t·∫ßm nh√¨n ƒë·ªïi m·ªõi c√¥ng ngh·ªá. Lu√¥n t√¨m c√°ch h·ªçc h·ªèi, s√°ng t·∫°o v√† √°p d·ª•ng nh·ªØng c√¥ng ngh·ªá m·ªõi ƒë·ªÉ gi·∫£i quy·∫øt c√°c b√†i to√°n ph·ª©c t·∫°p.",
        contact: "duyanh@gmail.com",
        socialMedia: {
          github: "https://github.com/duyanh",
          linkedin: "https://linkedin.com/in/duyanh",
        },
        relationshipStatus: "ƒê·ªôc th√¢n",
      };

      const authorResponse = {
        id: Date.now() + 3,
        text: `
          <strong>üë®‚Äçüíª Gi·ªõi thi·ªáu ng∆∞·ªùi s√°ng l·∫≠p:</strong>
          <ul>
            <li><strong>H·ªç v√† t√™n:</strong> ${authorProfile.name}</li>
            <li><strong>H·ªçc v·∫•n:</strong> ${authorProfile.education}</li>
            <li>
              <strong>K·ªπ nƒÉng n·ªïi b·∫≠t:</strong>
              <ul>
                ${authorProfile.skills
                  .map((skill) => `<li>‚úÖ ${skill}</li>`)
                  .join("")}
              </ul>
            </li>
            <li><strong>Ti·ªÉu s·ª≠:</strong> ${authorProfile.bio}</li>
            <li>
              <strong>Li√™n h·ªá:</strong> 
              <p>üìß Email: ${authorProfile.contact}</p>
              <p>üîó GitHub: ${authorProfile.socialMedia.github}</p>
              <p>üîó LinkedIn: ${authorProfile.socialMedia.linkedin}</p>
            </li>
            <li><strong>Tr·∫°ng th√°i:</strong> ${
              authorProfile.relationshipStatus
            }</li>
          </ul>
        `,
        sender: "bot",
      };

      setMessages((prev) => [...prev, authorResponse]);
      return;
    }

    // X·ª≠ l√Ω tin nh·∫Øn AI n·∫øu kh√¥ng kh·ªõp c√°c t·ª´ kh√≥a
    try {
      const res = await PostChatBotAI(inputMessage.trim());

      if (res.data?.message?.content) {
        const formattedContent = res.data.message.content
          .replace(/(?:\*|[*] )(.*)/g, "<li>$1</li>")
          .replace(/(?:[*]{2})(.*)(?:[*]{2})/g, "<strong>$1</strong>");

        const botResponse = {
          id: Date.now() + 1,
          text: formattedContent,
          sender: "bot",
        };

        setMessages((prev) => [...prev, botResponse]);
      }
    } catch (error) {
      console.error("Error sending message:", error);

      const errorMessage = {
        id: Date.now() + 1,
        text: "‚ùå Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n.",
        sender: "bot",
      };

      setMessages((prev) => [...prev, errorMessage]);
    }
  };

  return (
    <div className="flex flex-col h-screen bg-gray-100">
      {/* Message list */}
      <div className="flex-grow overflow-y-auto p-4 space-y-4">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`flex items-start space-x-2 ${
              msg.sender === "user" ? "justify-end" : "justify-start"
            }`}
          >
            {msg.sender === "bot" && <BotIcon />}
            <div
              className={`px-4 py-2 rounded-lg max-w-[70%] ${
                msg.sender === "user"
                  ? "bg-blue-500 text-white"
                  : "bg-white text-gray-800 border"
              }`}
            >
              {/* Render content conditionally */}
              {msg.sender === "bot" ? (
                <ul
                  dangerouslySetInnerHTML={{
                    __html: `<ul>${msg.text}</ul>`,
                  }}
                />
              ) : (
                msg.text
              )}
            </div>
            {msg.sender === "user" && (
              <div className="flex items-center space-x-2">
                <UserIcon />
                <p className="text-sm text-gray-600">
                  {user?.name || "Ng∆∞·ªùi d√πng"}
                </p>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Input box */}
      <div className="p-4 bg-white border-t flex items-center space-x-2">
        <input
          type="text"
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && handleSendMessage()}
          placeholder="Nh·∫≠p tin nh·∫Øn..."
          className="flex-grow px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button
          onClick={handleSendMessage}
          className="bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600 transition"
        >
          <SendIcon />
        </button>
      </div>
    </div>
  );
};

export default BotChatAI;
